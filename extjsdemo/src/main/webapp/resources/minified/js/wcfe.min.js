Ext.ns("Wcfe");

XType = {
	textfield : "textfield",
	button : "button",
	window : "window",
	panel : "panel",
	viewport : "viewport",
	clientform : "clientform",
	breadcrumb : "breadcrumb",
	datefield : "datefield",
	namefield : "namefield"
};

Wcfe = {
	/**
	 * 
	 * @returns Return true if local storage is supported by browser.
	 */
	supportsLocalStorage : function() {
		try {
			return 'localStorage' in window && window['localStorage'] !== null;
		} catch (e) {
			return false;
		}
	}
};

/**
 * 
 * This is a singleton class and can't be create directly
 * 
 * Use the init(); for create a new instance
 * 
 * @author kokeny
 */
Wcfe.App = function() {

	/**
	 * Current version
	 */
	var version = "1.0";

	/**
	 * Name of the application
	 */
	var name = "WCFE";

	/**
	 * Init user interface
	 */
	function initUI() {
		console.debug("Init application user interface");

		createViewPort();
	}
	
	function initStateProvider(){
		var stateProvider  = null;
		if(Wcfe.supportsLocalStorage()){
			stateProvider = new Wcfe.state.LocalStorageProvider();
		}else{
			stateProvider = new Ext.state.CookieProvider();
		}

	 	Ext.state.Manager.setProvider(stateProvider);
	}

	function createViewPort() {
		var content = createContent();

		var viewPort = Ext.create({
			layout : 'border',
			stateful : true,
			items : [ {
				region : 'east',
				stateId: 'eastPanel',
				split: true,
				collapsible: true,
				width : 300,
				xtype : XType.panel,
			}, content ]
		}, XType.viewport);

		return viewPort;
	}

	function createContent() {
		var clientForm = Ext.create({}, "clientform");
	
		return Ext.create({
			region : 'center',
			items : [ clientForm ]
		}, XType.panel);
	}

	return {

		/**
		 * 
		 * @returns Return instance of the application
		 */
		getInstance : function() {
			return this;
		},

		/**
		 * 
		 * @returns Return instance of the application
		 */
		init : function() {
			initStateProvider();
			initUI();

			return this.getInstance();
		},

		/**
		 * 
		 * 
		 * @returns Return version of the application
		 */
		getVersion : function() {
			return version;
		},

		/**
		 * 
		 * @returns Return name of the application
		 */
		getName : function() {
			return name;
		}
	}
}();Ext.ns("Wcfe.component");

Wcfe.component.BreadCrumb = Ext.extend(Ext.Panel, {

	addAction : function() {

	}
});

Ext.reg(XType.breadcrumb, Wcfe.component.BreadCrumb);
Ext.ns("Wcfe.field");

Wcfe.field.NameField = Ext.extend(Ext.form.CompositeField, {

	/**
	 * Default empty text to firstName field
	 */
	firstNameText : "Firstname",

	/**
	 * Default empty text to lastName field
	 */
	lastNameText : "Lastname",

	initComponent : function() {
		var config = {};

		config.items = this.createItems();

		config = Ext.apply(this.initialConfig, config);
		Ext.apply(this, config);

		Wcfe.field.NameField.superclass.initComponent.call(this);
	},

	createItems : function() {
		var items = [ {
			xtype : XType.textfield,
			emptyText : this.lastNameText,
			name : 'name.lastName'
		}, {
			xtype : XType.textfield,
			emptyText : this.firstNameText,
			name : 'name.firstName'
		} ];
		return items;
	}
});

Ext.reg(XType.namefield, Wcfe.field.NameField);Ext.ns("Wcfe.form");

Wcfe.form.AbstractFormPanel = Ext.extend(Ext.form.FormPanel, {

	/**
	 * This form is stateful
	 */
	stateful : true,

	/**
	 * Create panel without border
	 */
	border : false,
	
	
	/**
	 * Init state events
	 */
	initStateEvents : function() {
		Wcfe.form.AbstractFormPanel.superclass.initStateEvents.call(this);
		this.mon(this, 'onsave', this.saveState, this);
		this.mon(this, 'onreset', this.saveState, this);

		var me = this;
		this.iterateOwnItems(function(item) {
			item.mon(item, 'change', me.saveState, me);
			item.mon(item, 'change', me.onChange, me);
		});
	},

	iterateOwnItems : function(callback) {
		if (!Ext.isDefined(callback) || callback == null) {
			throw "Callback function cannot be null or undifined";
		}

		if (!this.items || !this.items.length) {
			return;
		}

		var iter = function(items) {
			items.each(function(item) {
				if (item.isComposite) {
					iter(item.items);
				}
				callback(item);
			});
		}
		iter(this.items);
	},

	initComponent : function() {
		var config = {};

		config.items = this.createItems();
		config.bbar = this.createBottomToolbar();

		config = Ext.apply(this.initialConfig, config);

		Ext.apply(this, config);

		Wcfe.form.AbstractFormPanel.superclass.initComponent.call(this);
	},

	createItems : function() {
		return [];
	},

	createBottomToolbar : function() {
		return [];
	},

	onChange : function() {
		console.debug("Form fields has been changed");
	},

	resetForm : function() {
		console.debug("Reset form values");

		this.iterateOwnItems(function(item) {
			item.setValue(null);
		});

		this.fireEvent('onreset');
	},

	saveForm : function() {
		console.debug("Save client form");

		var me = this;

		me.fireEvent('onsave');
		this.getForm().submit({
			clientValidation : true,
			submitEmptyText : false,
			success : me.onSaveSuccess,
			failure : me.onSaveFailure,
			waitTitle : "Please wait",
			waitMsg : "Please wait, save in progress"
		});
	},

	onSaveSuccess : function() {
		console.debug("Save success");
	},

	onSaveFailure : function() {
		console.debug("Save failed");
	},

	applyState : function(state) {
		console.debug("Apply %O state to ClientForm", state);
		this.getForm().setValues(state.formValues);
		
		Wcfe.form.AbstractFormPanel.superclass.applyState.call(state);
	},

	getState : function() {
		console.log("state", this);
		var state = {
			formValues : this.getForm().getValues(),
			width : this.getWidth(),
			height : this.getHeight()
		};
		return state;
	},
});
Ext.ns("Wcfe.form");

Wcfe.form.ClientFormPanel = Ext.extend(Wcfe.form.AbstractFormPanel, {

	cityLabel : "City",
	
	nameLabel : "Name",
	
	birthDateLabel : "Birthdate",
	
	resetText: "Reset",
	
	saveText : "Save",
	
	title : 'Search clients',
	
	/**
	 * The state id of client form
	 */
	stateId : 'clientform.state',

	createItems : function() {
		var items = [ {
			fieldLabel : this.cityLabel,
			xtype : "textfield",
			name : "city"
		}, {
			xtype : XType.namefield,
			fieldLabel : this.nameLabel
		}, {
			xtype : XType.datefield,
			name : 'birthDate',
			fieldLabel : this.birthDateLabel
		} ];
		return items;
	},

	createBottomToolbar : function() {
		this.btnReset = Ext.create({
			text : this.resetText,
			scope : this,
			handler : this.resetForm
		}, "button");

		this.btnSave = Ext.create({
			text : this.saveText,
			scope : this,
			handler : this.saveForm
		}, "button");

		var buttons = [ this.btnSave, this.btnReset ];

		return buttons;
	},

});


Ext.reg("clientform", Wcfe.form.ClientFormPanel);


Ext.onReady(function() {

	var start = Date.now();

	App = Wcfe.App.init();

	var end = Date.now();
	var time = end - start;

	console.info("Application is ready now");
	console.info("Current version ", App.getVersion());
	console.info('Execution time: ' + time + " ms");
});
/**
 * Client form panel hungarian translation
 */
Ext.override(Wcfe.form.ClientFormPanel, {
	cityLabel : "Város",
	nameLabel : "Név",
	birthDateLabel : "Születési dátum",
	resetText : "Törlés",
	saveText : "Mentés",
	title : 'Ügyfelek keresése'
});
/**
 * NameField hungarian translation
 */
Ext.override(Wcfe.field.NameField, {
	firstNameText : "Keresztnév",
	lastNameText : "Vezetéknév",
});

/**
 * Temporaly solution
 */
Ext.override(Ext.form.BasicForm, {

	nestedSeparator : '.',

	doSetValues : function(values, form, parentId) {
		var field, id, value;
		for (id in values) {
			value = values[id];
			id = Ext.isDefined(parentId) ? parentId + this.nestedSeparator + id
					: id;

			if (Ext.isObject(value)) {
				form.doSetValues(value, form, id);
			}

			field = this.findField(id);

			if (!Ext.isFunction(value) && field) {
				field.setValue(value);
				console.debug("Set field value: ", id, values, value);
				if (this.trackResetOnLoad) {
					field.originalValue = field.getValue();
				}
			}
		}
	},

	setValues : function(values) {
		if (Ext.isArray(values)) {
			for (var i = 0, len = values.length; i < len; i++) {
				var v = values[i];
				this.doSetValues(v, this);
			}
		} else { // object hash
			this.doSetValues(values, this);
		}
		return this;
	},

});Ext.ns("Wcfe.state");

/**
 * @class Wcfe.state.LocalStorageProvider
 * @extends Ext.state.Provider
 * 
 * Custom state provider implementation.
 * LocalStorageProvider use the HTML5 localstorage for save state of objects.
 * 
 * @author Gabor Kokeny
 */
Wcfe.state.LocalStorageProvider = Ext.extend(Ext.state.Provider, {
	
	/**
	 * 
	 * Constructor
	 */
    constructor : function(config){
    	if(!Wcfe.supportsLocalStorage()){
    		throw "Couldn't initialize LocalStorageProvider because your browser is not supports the HTML5 localStorage";
    	}
    	
    	Wcfe.state.LocalStorageProvider.superclass.constructor.call(this);

    	//Delete unused variable
    	delete this.state;
    	
    	Ext.apply(this, config);
        
        console.debug("LocalStorageProvider initialized", this);
    },

    /**
     * 
     * @param key The key of state
     * @param defaultValue  The defaultValue
     * 
     * @returns If localStorage contains key then return the current
     * value else return the defaultValue
     */
    get : function(key, defaultValue){
    	var value = localStorage.getItem(key);	

    	if(value == null){
    		console.warn("There is no value in localstorage with key", key);
    		return defaultValue;
    	}
    	
    	value = this.decodeValue(value);
      
    	console.debug("LocalStorageProvider - get state of '"+ key+"'", value);
        
        return value;
    },

    /**
     * Set value in localStorage
     * 
     * @param name The key of state
     * @param value The current valu e of state
     */
    set : function(key, value){
        if(typeof value == 'undefined' || value === null){
            this.clear(key);
            return;
        }
        console.debug("LocalStorageProvider - set state of '"+ key+"'", value);
        
        localStorage.setItem(key, this.encodeValue(value));
      
        this.fireEvent("statechange", this, key, null);
    },

    /**
     * Remove item from the localeStorage by a key
     * 
     * @param name The key of state
     */
    clear : function(key){
        console.debug("LocalStorageProvider - clear state of '"+ key+"'");
        
        localStorage.removeItem(key);
        
        this.fireEvent("statechange", this, key, value);
    }
   
});